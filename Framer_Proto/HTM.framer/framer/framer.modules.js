require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"iPhone6Keyboard":[function(require,module,exports){

/*
    iOS Keyboard for Framer
    http://github.com/supsupmo/iPhone6Keyboard-for-framer
 */
var delayDestroy, iPhone6KeyLocation, iPhone6KeyProps, iPhone6Keyboard, iPhone6Props, keyboard, keyboardUp;

iPhone6Keyboard = {};

keyboard = null;

keyboardUp = false;

iPhone6Keyboard.create = function() {
  var props;
  props = iPhone6Props;
  keyboard = new Layer({
    height: props.height,
    width: props.width,
    y: props.screenHeight,
    image: "modules/iphone6Keyboard.jpg"
  });
  keyboard.states.animationOptions = {
    time: props.keyboardSpeed,
    curve: "ease-in-out"
  };
  return keyboard.states.add({
    show: {
      y: props.screenHeight - props.height
    }
  });
};

iPhone6Keyboard.keyPress = function(letter) {
  var aTime, animationA, animationB, bDelay, bTime, delay, overlay;
  overlay = new Layer({
    superLayer: keyboard,
    x: 0,
    y: 0,
    borderRadius: 6,
    width: iPhone6KeyProps.width,
    height: iPhone6KeyProps.height,
    backgroundColor: "rgba(0, 0, 0, 0.25)",
    opacity: 0
  });
  if (iPhone6KeyLocation[letter]) {
    overlay.x = iPhone6KeyLocation[letter].x;
  }
  if (iPhone6KeyLocation[letter]) {
    overlay.y = iPhone6KeyLocation[letter].y;
  }
  if (iPhone6KeyLocation[letter] && iPhone6KeyLocation[letter].width) {
    overlay.width = iPhone6KeyLocation[letter].width;
  }
  aTime = 0.05;
  bDelay = 0.1;
  bTime = 0.25;
  animationA = new Animation({
    layer: overlay,
    properties: {
      opacity: 1
    },
    time: aTime,
    curve: "linear"
  });
  animationB = new Animation({
    layer: overlay,
    properties: {
      opacity: 0
    },
    delay: bDelay,
    time: bTime,
    curve: "linear"
  });
  animationA.on(Events.AnimationEnd, animationB.start);
  delay = aTime + bDelay + bTime;
  animationB.on(Events.AnimationEnd, delayDestroy(delay, overlay));
  return animationA.start();
};

delayDestroy = function(delay, layer) {
  return Utils.delay(delay, function() {
    return layer.destroy();
  });
};

iPhone6Keyboard.show = function(immediate) {
  if (immediate == null) {
    immediate = false;
  }
  if (immediate) {
    keyboard.states.switchInstant("show");
  } else {
    keyboard.states["switch"]("show");
  }
  return keyboardUp = true;
};

iPhone6Keyboard.hide = function(immediate) {
  if (immediate == null) {
    immediate = true;
  }
  if (immediate) {
    keyboard.states.switchInstant("default");
  } else {
    keyboard.states["switch"]("default");
  }
  return keyboardUp = false;
};

iPhone6Props = {
  height: 432,
  width: 750,
  screenHeight: 1334,
  screenWidth: 750,
  keyboardSpeed: 0.35
};

iPhone6KeyProps = {
  width: 245,
  height: 108
};

iPhone6KeyLocation = {
  num1: {
    "x": 0,
    "y": 0,
    "width": 245,
    "height": 108
  },
  num2: {
    "x": 246,
    "y": 0,
    "width": 258,
    "height": 108
  },
  num3: {
    "x": 505,
    "y": 0,
    "width": 245,
    "height": 108
  },
  num4: {
    "x": 0,
    "y": 109,
    "width": 245,
    "height": 107
  },
  num5: {
    "x": 246,
    "y": 109,
    "width": 258,
    "height": 107
  },
  num6: {
    "x": 505,
    "y": 109,
    "width": 245,
    "height": 107
  },
  num7: {
    "x": 0,
    "y": 217,
    "width": 245,
    "height": 107
  },
  num8: {
    "x": 246,
    "y": 217,
    "width": 258,
    "height": 107
  },
  num9: {
    "x": 505,
    "y": 217,
    "width": 245,
    "height": 107
  },
  num0: {
    "x": 246,
    "y": 325,
    "width": 258,
    "height": 107
  },
  "delete": {
    "x": 505,
    "y": 0,
    "width": 245,
    "height": 107
  }
};

_.extend(exports, iPhone6Keyboard);


},{}],"myModule":[function(require,module,exports){
exports.myVar = "myVariable";

exports.myFunction = function() {
  return print("myFunction is running");
};

exports.myArray = [1, 2, 3];


},{}]},{},[])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
