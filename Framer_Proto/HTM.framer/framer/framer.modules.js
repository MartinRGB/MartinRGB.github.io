require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"iPhone6Keyboard":[function(require,module,exports){

/*
    iOS Keyboard for Framer
    http://github.com/supsupmo/iPhone6Keyboard-for-framer
 */
var delayDestroy, iPhone6KeyLocation, iPhone6KeyProps, iPhone6Keyboard, iPhone6Props, keyboard, keyboardUp;

iPhone6Keyboard = {};

keyboard = null;

keyboardUp = false;

iPhone6Keyboard.create = function() {
  var props;
  props = iPhone6Props;
  keyboard = new Layer({
    height: props.height,
    width: props.width,
    y: props.screenHeight,
    image: "modules/iphone6Keyboard.jpg"
  });
  keyboard.states.animationOptions = {
    time: props.keyboardSpeed,
    curve: "ease-in-out"
  };
  return keyboard.states.add({
    show: {
      y: props.screenHeight - props.height
    }
  });
};

iPhone6Keyboard.keyPress = function(letter) {
  var aTime, animationA, animationB, bDelay, bTime, delay, overlay;
  overlay = new Layer({
    superLayer: keyboard,
    x: 0,
    y: 0,
    borderRadius: 6,
    width: iPhone6KeyProps.width,
    height: iPhone6KeyProps.height,
    backgroundColor: "rgba(0, 0, 0, 0.25)",
    opacity: 0
  });
  if (iPhone6KeyLocation[letter]) {
    overlay.x = iPhone6KeyLocation[letter].x;
  }
  if (iPhone6KeyLocation[letter]) {
    overlay.y = iPhone6KeyLocation[letter].y;
  }
  if (iPhone6KeyLocation[letter] && iPhone6KeyLocation[letter].width) {
    overlay.width = iPhone6KeyLocation[letter].width;
  }
  aTime = 0.05;
  bDelay = 0.1;
  bTime = 0.25;
  animationA = new Animation({
    layer: overlay,
    properties: {
      opacity: 1
    },
    time: aTime,
    curve: "linear"
  });
  animationB = new Animation({
    layer: overlay,
    properties: {
      opacity: 0
    },
    delay: bDelay,
    time: bTime,
    curve: "linear"
  });
  animationA.on(Events.AnimationEnd, animationB.start);
  delay = aTime + bDelay + bTime;
  animationB.on(Events.AnimationEnd, delayDestroy(delay, overlay));
  return animationA.start();
};

delayDestroy = function(delay, layer) {
  return Utils.delay(delay, function() {
    return layer.destroy();
  });
};

iPhone6Keyboard.show = function(immediate) {
  if (immediate == null) {
    immediate = false;
  }
  if (immediate) {
    keyboard.states.switchInstant("show");
  } else {
    keyboard.states["switch"]("show");
  }
  return keyboardUp = true;
};

iPhone6Keyboard.hide = function(immediate) {
  if (immediate == null) {
    immediate = true;
  }
  if (immediate) {
    keyboard.states.switchInstant("default");
  } else {
    keyboard.states["switch"]("default");
  }
  return keyboardUp = false;
};

iPhone6Props = {
  height: 432,
  width: 750,
  screenHeight: 1334,
  screenWidth: 750,
  keyboardSpeed: 0.35
};

iPhone6KeyProps = {
  width: 245,
  height: 108
};

iPhone6KeyLocation = {
  num1: {
    "x": 0,
    "y": 0,
    "width": 245,
    "height": 108
  },
  num2: {
    "x": 246,
    "y": 0,
    "width": 258,
    "height": 108
  },
  num3: {
    "x": 505,
    "y": 0,
    "width": 245,
    "height": 108
  },
  num4: {
    "x": 0,
    "y": 109,
    "width": 245,
    "height": 107
  },
  num5: {
    "x": 246,
    "y": 109,
    "width": 258,
    "height": 107
  },
  num6: {
    "x": 505,
    "y": 109,
    "width": 245,
    "height": 107
  },
  num7: {
    "x": 0,
    "y": 217,
    "width": 245,
    "height": 107
  },
  num8: {
    "x": 246,
    "y": 217,
    "width": 258,
    "height": 107
  },
  num9: {
    "x": 505,
    "y": 217,
    "width": 245,
    "height": 107
  },
  num0: {
    "x": 246,
    "y": 325,
    "width": 258,
    "height": 107
  },
  "delete": {
    "x": 505,
    "y": 0,
    "width": 245,
    "height": 107
  }
};

_.extend(exports, iPhone6Keyboard);


},{}],"myModule":[function(require,module,exports){
exports.myVar = "myVariable";

exports.myFunction = function() {
  return print("myFunction is running");
};

exports.myArray = [1, 2, 3];


},{}]},{},[])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvTWFydGluUkdCL0Rlc2t0b3AvR2l0aHViL01hcnRpblJHQi5naXRodWIuaW8vTWFpblBhZ2UuZnJhbWVyL21vZHVsZXMvaVBob25lNktleWJvYXJkLmNvZmZlZSIsIi9Vc2Vycy9NYXJ0aW5SR0IvRGVza3RvcC9HaXRodWIvTWFydGluUkdCLmdpdGh1Yi5pby9NYWluUGFnZS5mcmFtZXIvbW9kdWxlcy9teU1vZHVsZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FDQUE7Ozs7QUFBQSxJQUFBOztBQVFBLGVBQUEsR0FBa0I7O0FBQ2xCLFFBQUEsR0FBVzs7QUFDWCxVQUFBLEdBQWE7O0FBTWIsZUFBZSxDQUFDLE1BQWhCLEdBQXlCLFNBQUE7QUFJckIsTUFBQTtFQUFBLEtBQUEsR0FBUTtFQUNSLFFBQUEsR0FBZSxJQUFBLEtBQUEsQ0FDWDtJQUFBLE1BQUEsRUFBUSxLQUFLLENBQUMsTUFBZDtJQUFzQixLQUFBLEVBQU8sS0FBSyxDQUFDLEtBQW5DO0lBQTBDLENBQUEsRUFBRyxLQUFLLENBQUMsWUFBbkQ7SUFDQSxLQUFBLEVBQU8sNkJBRFA7R0FEVztFQUlmLFFBQVEsQ0FBQyxNQUFNLENBQUMsZ0JBQWhCLEdBQW1DO0lBRS9CLElBQUEsRUFBTSxLQUFLLENBQUMsYUFGbUI7SUFFSixLQUFBLEVBQU8sYUFGSDs7U0FLbkMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFoQixDQUFvQjtJQUNoQixJQUFBLEVBQU07TUFBRSxDQUFBLEVBQUcsS0FBSyxDQUFDLFlBQU4sR0FBcUIsS0FBSyxDQUFDLE1BQWhDO0tBRFU7R0FBcEI7QUFkcUI7O0FBbUJ6QixlQUFlLENBQUMsUUFBaEIsR0FBMkIsU0FBQyxNQUFEO0FBQ3ZCLE1BQUE7RUFBQSxPQUFBLEdBQWMsSUFBQSxLQUFBLENBQ1Y7SUFBQSxVQUFBLEVBQVks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eEM7R0FaTjtFQWVBLElBQUEsRUFBTTtJQUFBLEdBQUEsRUFBSyxHQUFMO0lBQVUsR0FBQSxFQUFLLEdBQWY7SUFBbUIsT0FBQSxFQUFRLEdBQTNCO0lBQStCLFFBQUEsRUFBUyxHQUF4QztHQWZOO0VBZ0JBLFFBQUEsRUFBUTtJQUFBLEdBQUEsRUFBSyxHQUFMO0lBQVUsR0FBQSxFQUFLLENBQWY7SUFBaUIsT0FBQSxFQUFRLEdBQXpCO0lBQTZCLFFBQUEsRUFBUyxHQUF0QztHQWhCUjs7O0FBb0JKLENBQUMsQ0FBQyxNQUFGLENBQVMsT0FBVCxFQUFrQixlQUFsQjs7OztBQzFIQSxPQUFPLENBQUMsS0FBUixHQUFnQjs7QUFFaEIsT0FBTyxDQUFDLFVBQVIsR0FBcUIsU0FBQTtTQUNwQixLQUFBLENBQU0sdUJBQU47QUFEb0I7O0FBR3JCLE9BQU8sQ0FBQyxPQUFSLEdBQWtCLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIiMjI1xuICAgIGlPUyBLZXlib2FyZCBmb3IgRnJhbWVyXG4gICAgaHR0cDovL2dpdGh1Yi5jb20vc3Vwc3VwbW8vaVBob25lNktleWJvYXJkLWZvci1mcmFtZXJcbiMjI1xuXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiMgVmFyc1xuXG5pUGhvbmU2S2V5Ym9hcmQgPSB7fVxua2V5Ym9hcmQgPSBudWxsXG5rZXlib2FyZFVwID0gZmFsc2VcblxuXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiMgRnVuY3Rpb25zXG5cbmlQaG9uZTZLZXlib2FyZC5jcmVhdGUgPSAtPlxuXG4gICAgIyBUT0RPOiBBZGQgb3RoZXIgaVBob25lIGZhY3RvcnMgaWYgdGhlcmUncyBkZW1hbmRcblxuICAgIHByb3BzID0gaVBob25lNlByb3BzXG4gICAga2V5Ym9hcmQgPSBuZXcgTGF5ZXJcbiAgICAgICAgaGVpZ2h0OiBwcm9wcy5oZWlnaHQsIHdpZHRoOiBwcm9wcy53aWR0aCwgeTogcHJvcHMuc2NyZWVuSGVpZ2h0XG4gICAgICAgIGltYWdlOiBcIm1vZHVsZXMvaXBob25lNktleWJvYXJkLmpwZ1wiXG5cbiAgICBrZXlib2FyZC5zdGF0ZXMuYW5pbWF0aW9uT3B0aW9ucyA9IHtcbiAgICAgICAgIyBUT0RPOiBNaW1pYyB0aGUgYWN0dWFsIHRpbWluZyAmIGN1cnZlXG4gICAgICAgIHRpbWU6IHByb3BzLmtleWJvYXJkU3BlZWQsIGN1cnZlOiBcImVhc2UtaW4tb3V0XCJcbiAgICB9XG5cbiAgICBrZXlib2FyZC5zdGF0ZXMuYWRkKHtcbiAgICAgICAgc2hvdzogeyB5OiBwcm9wcy5zY3JlZW5IZWlnaHQgLSBwcm9wcy5oZWlnaHQgfVxuICAgIH0pXG5cblxuaVBob25lNktleWJvYXJkLmtleVByZXNzID0gKGxldHRlcikgLT5cbiAgICBvdmVybGF5ID0gbmV3IExheWVyXG4gICAgICAgIHN1cGVyTGF5ZXI6IGtleWJvYXJkLCB4OiAwLCB5OiAwLCBib3JkZXJSYWRpdXM6IDYsXG4gICAgICAgIHdpZHRoOiBpUGhvbmU2S2V5UHJvcHMud2lkdGgsIGhlaWdodDogaVBob25lNktleVByb3BzLmhlaWdodCxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMCwgMCwgMCwgMC4yNSlcIiwgb3BhY2l0eTogMFxuXG4gICAgb3ZlcmxheS54ID0gaVBob25lNktleUxvY2F0aW9uW2xldHRlcl0ueCBpZiBpUGhvbmU2S2V5TG9jYXRpb25bbGV0dGVyXVxuICAgIG92ZXJsYXkueSA9IGlQaG9uZTZLZXlMb2NhdGlvbltsZXR0ZXJdLnkgaWYgaVBob25lNktleUxvY2F0aW9uW2xldHRlcl1cbiAgICBvdmVybGF5LndpZHRoID0gaVBob25lNktleUxvY2F0aW9uW2xldHRlcl0ud2lkdGggaWYgaVBob25lNktleUxvY2F0aW9uW2xldHRlcl0gYW5kIGlQaG9uZTZLZXlMb2NhdGlvbltsZXR0ZXJdLndpZHRoXG5cbiAgICBhVGltZSA9IDAuMDVcbiAgICBiRGVsYXkgPSAwLjFcbiAgICBiVGltZSA9IDAuMjVcblxuICAgIGFuaW1hdGlvbkEgPSBuZXcgQW5pbWF0aW9uKHtcbiAgICAgICAgbGF5ZXI6IG92ZXJsYXlcbiAgICAgICAgcHJvcGVydGllczogeyBvcGFjaXR5OiAxIH1cbiAgICAgICAgdGltZTogICBhVGltZVxuICAgICAgICBjdXJ2ZTogIFwibGluZWFyXCJcbiAgICB9KVxuXG4gICAgYW5pbWF0aW9uQiA9IG5ldyBBbmltYXRpb24oe1xuICAgICAgICBsYXllcjogb3ZlcmxheVxuICAgICAgICBwcm9wZXJ0aWVzOiB7IG9wYWNpdHk6IDAgfVxuICAgICAgICBkZWxheTogIGJEZWxheVxuICAgICAgICB0aW1lOiAgIGJUaW1lXG4gICAgICAgIGN1cnZlOiAgXCJsaW5lYXJcIlxuICAgIH0pXG5cbiAgICBhbmltYXRpb25BLm9uKEV2ZW50cy5BbmltYXRpb25FbmQsIGFuaW1hdGlvbkIuc3RhcnQpXG4gICAgZGVsYXkgPSBhVGltZSArIGJEZWxheSArIGJUaW1lXG4gICAgYW5pbWF0aW9uQi5vbihFdmVudHMuQW5pbWF0aW9uRW5kLCBkZWxheURlc3Ryb3koZGVsYXksIG92ZXJsYXkpKVxuICAgIGFuaW1hdGlvbkEuc3RhcnQoKVxuXG5cbmRlbGF5RGVzdHJveSA9IChkZWxheSwgbGF5ZXIpIC0+XG4gICAgVXRpbHMuZGVsYXkgZGVsYXksIC0+XG4gICAgICAgIGxheWVyLmRlc3Ryb3koKVxuXG5cbmlQaG9uZTZLZXlib2FyZC5zaG93ID0gKGltbWVkaWF0ZSA9IGZhbHNlKSAtPlxuICAgIGlmIGltbWVkaWF0ZVxuICAgICAgICBrZXlib2FyZC5zdGF0ZXMuc3dpdGNoSW5zdGFudChcInNob3dcIilcbiAgICBlbHNlXG4gICAgICAgIGtleWJvYXJkLnN0YXRlcy5zd2l0Y2goXCJzaG93XCIpXG4gICAga2V5Ym9hcmRVcCA9IHRydWVcblxuXG5pUGhvbmU2S2V5Ym9hcmQuaGlkZSA9IChpbW1lZGlhdGUgPSB0cnVlKSAtPlxuICAgIGlmIGltbWVkaWF0ZVxuICAgICAgICBrZXlib2FyZC5zdGF0ZXMuc3dpdGNoSW5zdGFudChcImRlZmF1bHRcIilcbiAgICBlbHNlXG4gICAgICAgIGtleWJvYXJkLnN0YXRlcy5zd2l0Y2goXCJkZWZhdWx0XCIpXG4gICAga2V5Ym9hcmRVcCA9IGZhbHNlXG5cblxuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jIFByb3BlcnRpZXNcblxuaVBob25lNlByb3BzID1cbiAgICBoZWlnaHQ6IDQzMlxuICAgIHdpZHRoOiA3NTBcbiAgICBzY3JlZW5IZWlnaHQ6IDEzMzRcbiAgICBzY3JlZW5XaWR0aDogNzUwXG4gICAga2V5Ym9hcmRTcGVlZDogMC4zNVxuXG5pUGhvbmU2S2V5UHJvcHMgPVxuICAgIHdpZHRoOiAyNDUsIGhlaWdodDogMTA4XG5cbmlQaG9uZTZLZXlMb2NhdGlvbiA9XG4gICAgIyBGaXJzdCBSb3cgb2YgS2V5c1xuICAgIG51bTE6IFwieFwiOiAwLCBcInlcIjogMCxcIndpZHRoXCI6MjQ1LFwiaGVpZ2h0XCI6MTA4XG4gICAgbnVtMjogXCJ4XCI6IDI0NiwgXCJ5XCI6IDAsXCJ3aWR0aFwiOjI1OCxcImhlaWdodFwiOjEwOFxuICAgIG51bTM6IFwieFwiOiA1MDUsIFwieVwiOiAwLFwid2lkdGhcIjoyNDUsXCJoZWlnaHRcIjoxMDhcblxuICAgICMgU2Vjb25kIFJvdyBvZiBLZXlzXG4gICAgbnVtNDogXCJ4XCI6IDAsIFwieVwiOiAxMDksXCJ3aWR0aFwiOjI0NSxcImhlaWdodFwiOjEwN1xuICAgIG51bTU6IFwieFwiOiAyNDYsIFwieVwiOiAxMDksXCJ3aWR0aFwiOjI1OCxcImhlaWdodFwiOjEwN1xuICAgIG51bTY6IFwieFwiOiA1MDUsIFwieVwiOiAxMDksXCJ3aWR0aFwiOjI0NSxcImhlaWdodFwiOjEwN1xuXG4gICAgIyBUaGlyZCBSb3cgb2YgS2V5c1xuICAgIG51bTc6IFwieFwiOiAwLCBcInlcIjogMjE3LFwid2lkdGhcIjoyNDUsXCJoZWlnaHRcIjoxMDdcbiAgICBudW04OiBcInhcIjogMjQ2LCBcInlcIjogMjE3LFwid2lkdGhcIjoyNTgsXCJoZWlnaHRcIjoxMDdcbiAgICBudW05OiBcInhcIjogNTA1LCBcInlcIjogMjE3LFwid2lkdGhcIjoyNDUsXCJoZWlnaHRcIjoxMDdcblxuICAgICMgTWlzYyBLZXlzXG4gICAgbnVtMDogXCJ4XCI6IDI0NiwgXCJ5XCI6IDMyNSxcIndpZHRoXCI6MjU4LFwiaGVpZ2h0XCI6MTA3XG4gICAgZGVsZXRlOiBcInhcIjogNTA1LCBcInlcIjogMCxcIndpZHRoXCI6MjQ1LFwiaGVpZ2h0XCI6MTA3XG5cblxuXG5fLmV4dGVuZChleHBvcnRzLCBpUGhvbmU2S2V5Ym9hcmQpXG4iLCIjIEFkZCB0aGUgZm9sbG93aW5nIGxpbmUgdG8geW91ciBwcm9qZWN0IGluIEZyYW1lciBTdHVkaW8uIFxuIyBteU1vZHVsZSA9IHJlcXVpcmUgXCJteU1vZHVsZVwiXG4jIFJlZmVyZW5jZSB0aGUgY29udGVudHMgYnkgbmFtZSwgbGlrZSBteU1vZHVsZS5teUZ1bmN0aW9uKCkgb3IgbXlNb2R1bGUubXlWYXJcblxuZXhwb3J0cy5teVZhciA9IFwibXlWYXJpYWJsZVwiXG5cbmV4cG9ydHMubXlGdW5jdGlvbiA9IC0+XG5cdHByaW50IFwibXlGdW5jdGlvbiBpcyBydW5uaW5nXCJcblxuZXhwb3J0cy5teUFycmF5ID0gWzEsIDIsIDNdIl19
